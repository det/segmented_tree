#include <functional>
#include <numeric>
#include <memory>

template <typename Container, typename T>
void test_compile() {
  std::unique_ptr<T[]> array{new T[100000]};
  auto first = array.get();
  auto last = first + 100000;
  std::iota(first, last, 0);
  Container{};
  auto c1 = Container(1000);
  auto c2 = Container{first, last};
  auto c3 = Container{c2};
  auto c4 = std::move(c3);
  auto c5 = Container{1, 2, 3, 4};
  auto const &c6 = c4;
  c1 = c4;
  c1 = std::move(c5);
  c1 = {1, 2, 3, 4, 5};
  c4.assign(1000, 0);
  c1.assign(c4.begin(), c4.end());
  c4.assign({1, 2, 3, 4});
  c4.get_allocator();
  c4.at(2);
  c6.at(2);
  c4[2];
  c6[2];
  c4.front();
  c6.front();
  c4.back();
  c6.back();
  c4.begin();
  c6.begin();
  c4.cbegin();
  c4.penultimate();
  c6.penultimate();
  c4.cpenultimate();
  c4.end();
  c6.end();
  c4.cend();
  c4.nth(1000);
  c6.nth(1000);
  c4.rbegin();
  c6.rbegin();
  c4.crbegin();
  c4.rend();
  c6.rend();
  c4.crend();
  c4.empty();
  c4.size();
  c4.max_size();
  c4.clear();
  c4.insert(c4.end(), 0);
  T x = 0;
  c4.insert(c4.end(), std::move(x));
  c4.insert(c4.end(), 100, 0);
  c4.insert(c4.end(), c1.begin(), c1.end());
  c4.insert(c4.end(), {1, 2, 3, 4});
  c4.emplace(c4.end(), 0);
  c4.erase(c4.begin());
  c4.erase(c4.begin(), c4.end());
  c4.push_back(0);
  T y = 0;
  c4.push_back(std::move(y));
  c4.emplace_back(0);
  c4.pop_back();
  c4.push_front(0);
  T z = 0;
  c4.push_front(std::move(z));
  c4.emplace_front(0);
  c4.pop_front();
  c4.resize(10000);
  c4.resize(0);
  c4.swap(c1);
  c4.remove(0);
  c4.remove_if([](T const &t) { return t == 0; });
  c4.reverse();
  c4.sort();
  c4.unique();
  c4.unique(std::equal_to<T>{});
  c4.sort();
  c4.sort(std::less<T>{});
}
