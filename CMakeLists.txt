cmake_minimum_required (VERSION 2.8)
project (segmented_tree_seq)

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  set (standard "-std=c++11 -stdlib=libc++")
  set (math "-msse2")
  set (warning "-pedantic -Wall -Wextra -Wglobal-constructors -Wnon-virtual-dtor -Wshadow -Wnewline-eof -Wno-unused-parameter -Wno-unknown-pragmas")
  set (debug "-ggdb -fsanitize=address -fsanitize=undefined")
  set (release "-DNDEBUG -O2 -flto")
  set (symbol "-fno-rtti -fdata-sections -ffunction-sections -fvisibility=hidden -fvisibility-inlines-hidden")
  set (linker_symbol "-Wl,--gc-sections")
  set (linker "-lc++abi")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  set (standard "-std=c++11")
  set (math "-mfpmath=sse -msse2")
  set (warning "-pedantic -Wall -Wextra -Wnon-virtual-dtor -Wshadow -Wno-missing-field-initializers -Wno-unused-parameter -Wno-unknown-pragmas")
  set (debug "-ggdb")
  set (release "-DNDEBUG -O2 -flto")
  set (symbol "-fno-rtti -fdata-sections -ffunction-sections -fvisibility=hidden -fvisibility-inlines-hidden")
  set (linker_symbol "-Wl,--gc-sections")
else ()
  message(FATAL_ERROR "Unsupported compiler: ${CMAKE_CXX_COMPILER_ID}")
endif ()

set (CMAKE_CXX_FLAGS "${standard} ${math} ${warning}")
set (CMAKE_CXX_FLAGS_DEBUG "${debug}")
set (CMAKE_CXX_FLAGS_RELEASE "${release} ${symbol}")
set (CMAKE_EXE_LINKER_FLAGS "${linker}")
set (CMAKE_EXE_LINKER_FLAGS_RELEASE "${linker_symbol}")
set (CMAKE_CXX_FLAGS_RELWITHDEBINFO "${release} ${symbol} ${debug}")
set (CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${linker_symbol}")

if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  add_definitions(-DSEGMENTED_TREE_SEQ_DEBUG)
endif ()

include_directories (include)
include_directories (submodule)
add_subdirectory (include/boost/container)
add_subdirectory (example)
